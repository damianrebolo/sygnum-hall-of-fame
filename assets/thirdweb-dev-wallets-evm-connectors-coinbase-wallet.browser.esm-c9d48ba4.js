import{n as I,_ as c,w as P,a as w,i as l,W as m,d as o,p as _,c as v,k as E,o as C}from"./index-c8bec167.js";import{W as U,U as u,a as b,A as W,S as A}from"./errors-4bdf81d2.browser.esm-eabe67b1.js";import{n as f}from"./normalizeChainId-e4cc0175.browser.esm-196d9c80.js";var h=new WeakMap,d=new WeakMap,p=new WeakSet;class x extends U{constructor(t){let{chains:e,options:s}=t;super({chains:e,options:{reloadOnDisconnect:!1,...s}}),I(this,p),c(this,"id",P.coinbase),c(this,"name","Coinbase Wallet"),c(this,"ready",!0),w(this,h,{writable:!0,value:void 0}),w(this,d,{writable:!0,value:void 0}),c(this,"onAccountsChanged",i=>{i.length===0?this.emit("disconnect"):this.emit("change",{account:l(i[0])})}),c(this,"onChainChanged",i=>{const n=f(i),r=this.isChainUnsupported(n);this.emit("change",{chain:{id:n,unsupported:r}})}),c(this,"onDisconnect",()=>{this.emit("disconnect")})}async connect(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const s=await e.enable(),i=l(s[0]);let n=await this.getChainId(),r=this.isChainUnsupported(n);if(t&&n!==t)try{n=(await this.switchChain(t)).chainId,r=this.isChainUnsupported(n)}catch(a){console.error(`Connected but failed to switch to desired chain ${t}`,a)}return{account:i,chain:{id:n,unsupported:r},provider:new m(e)}}catch(e){throw/(user closed modal|accounts received is empty)/i.test(e.message)?new u(e):e}}async disconnect(){if(!o(this,d))return;const t=await this.getProvider();t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),t.disconnect(),t.close()}async getAccount(){const e=await(await this.getProvider()).request({method:"eth_accounts"});if(e.length===0)throw new Error("No accounts found");return l(e[0])}async getChainId(){const t=await this.getProvider();return f(t.chainId)}async getProvider(){var t;if(!o(this,d)){let e=(await _(()=>import("./index-e0b5307e.js").then(a=>a.i),["assets/index-e0b5307e.js","assets/index-c8bec167.js","assets/index-e8d0538d.css","assets/index-9348da44.js"])).default;typeof e!="function"&&typeof e.default=="function"&&(e=e.default),v(this,h,new e(this.options));const s=(t=o(this,h).walletExtension)==null?void 0:t.getChainId(),i=this.chains.find(a=>this.options.chainId?a.chainId===this.options.chainId:a.chainId===s)||this.chains[0],n=this.options.chainId||(i==null?void 0:i.chainId),r=this.options.jsonRpcUrl||(i==null?void 0:i.rpc[0]);v(this,d,o(this,h).makeWeb3Provider(r,n))}return o(this,d)}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[e,s]=await Promise.all([this.getProvider(),this.getAccount()]);return new m(e,t).getSigner(s)}async isAuthorized(){try{return!!await this.getAccount()}catch{return!1}}async switchChain(t){const e=await this.getProvider(),s=E(t);try{return await e.request({method:"wallet_switchEthereumChain",params:[{chainId:s}]}),this.chains.find(i=>i.chainId===t)??{chainId:t,name:`Chain ${s}`,slug:`${s}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],testnet:!1,chain:"ethereum",shortName:"eth"}}catch(i){const n=this.chains.find(r=>r.chainId===t);if(!n)throw new b({chainId:t,connectorId:this.id});if(i.code===4902)try{return await e.request({method:"wallet_addEthereumChain",params:[{chainId:s,chainName:n.name,nativeCurrency:n.nativeCurrency,rpcUrls:n.rpc,blockExplorerUrls:this.getBlockExplorerUrls(n)}]}),n}catch(r){throw C(this,p,y).call(this,r)?new u(r):new W}throw C(this,p,y).call(this,i)?new u(i):new A(i)}}async setupListeners(){const t=await this.getProvider();t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect)}async getQrUrl(){if(await this.getProvider(),!o(this,h))throw new Error("Coinbase Wallet SDK not initialized");return o(this,h).getQrUrl()}}function y(g){return/(user rejected)/i.test(g.message)}export{x as CoinbaseWalletConnector};
